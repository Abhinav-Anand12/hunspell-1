// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// R_hunspell_info
List R_hunspell_info(Rcpp::String affix, CharacterVector dict);
RcppExport SEXP hunspell_R_hunspell_info(SEXP affixSEXP, SEXP dictSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type affix(affixSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dict(dictSEXP);
    rcpp_result_gen = Rcpp::wrap(R_hunspell_info(affix, dict));
    return rcpp_result_gen;
END_RCPP
}
// R_hunspell_check
LogicalVector R_hunspell_check(Rcpp::String affix, CharacterVector dict, StringVector words);
RcppExport SEXP hunspell_R_hunspell_check(SEXP affixSEXP, SEXP dictSEXP, SEXP wordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type affix(affixSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dict(dictSEXP);
    Rcpp::traits::input_parameter< StringVector >::type words(wordsSEXP);
    rcpp_result_gen = Rcpp::wrap(R_hunspell_check(affix, dict, words));
    return rcpp_result_gen;
END_RCPP
}
// R_hunspell_suggest
List R_hunspell_suggest(Rcpp::String affix, CharacterVector dict, StringVector words);
RcppExport SEXP hunspell_R_hunspell_suggest(SEXP affixSEXP, SEXP dictSEXP, SEXP wordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type affix(affixSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dict(dictSEXP);
    Rcpp::traits::input_parameter< StringVector >::type words(wordsSEXP);
    rcpp_result_gen = Rcpp::wrap(R_hunspell_suggest(affix, dict, words));
    return rcpp_result_gen;
END_RCPP
}
// R_hunspell_analyze
List R_hunspell_analyze(Rcpp::String affix, CharacterVector dict, StringVector words);
RcppExport SEXP hunspell_R_hunspell_analyze(SEXP affixSEXP, SEXP dictSEXP, SEXP wordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type affix(affixSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dict(dictSEXP);
    Rcpp::traits::input_parameter< StringVector >::type words(wordsSEXP);
    rcpp_result_gen = Rcpp::wrap(R_hunspell_analyze(affix, dict, words));
    return rcpp_result_gen;
END_RCPP
}
// R_hunspell_stem
List R_hunspell_stem(Rcpp::String affix, CharacterVector dict, StringVector words);
RcppExport SEXP hunspell_R_hunspell_stem(SEXP affixSEXP, SEXP dictSEXP, SEXP wordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type affix(affixSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dict(dictSEXP);
    Rcpp::traits::input_parameter< StringVector >::type words(wordsSEXP);
    rcpp_result_gen = Rcpp::wrap(R_hunspell_stem(affix, dict, words));
    return rcpp_result_gen;
END_RCPP
}
// R_hunspell_find
List R_hunspell_find(std::string affix, CharacterVector dict, StringVector text, std::string format, StringVector ignore);
RcppExport SEXP hunspell_R_hunspell_find(SEXP affixSEXP, SEXP dictSEXP, SEXP textSEXP, SEXP formatSEXP, SEXP ignoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type affix(affixSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dict(dictSEXP);
    Rcpp::traits::input_parameter< StringVector >::type text(textSEXP);
    Rcpp::traits::input_parameter< std::string >::type format(formatSEXP);
    Rcpp::traits::input_parameter< StringVector >::type ignore(ignoreSEXP);
    rcpp_result_gen = Rcpp::wrap(R_hunspell_find(affix, dict, text, format, ignore));
    return rcpp_result_gen;
END_RCPP
}
// R_hunspell_parse
List R_hunspell_parse(std::string affix, CharacterVector dict, StringVector text, std::string format);
RcppExport SEXP hunspell_R_hunspell_parse(SEXP affixSEXP, SEXP dictSEXP, SEXP textSEXP, SEXP formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type affix(affixSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dict(dictSEXP);
    Rcpp::traits::input_parameter< StringVector >::type text(textSEXP);
    Rcpp::traits::input_parameter< std::string >::type format(formatSEXP);
    rcpp_result_gen = Rcpp::wrap(R_hunspell_parse(affix, dict, text, format));
    return rcpp_result_gen;
END_RCPP
}
